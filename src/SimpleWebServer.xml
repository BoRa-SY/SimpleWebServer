<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SimpleWebServer</name>
    </assembly>
    <members>
        <member name="T:SimpleWebServer.Attributes.WebPath">
            <summary>
            WebPath Attribute
            </summary>
        </member>
        <member name="M:SimpleWebServer.Attributes.WebPath.#ctor(System.String,SimpleWebServer.HttpMethods)">
            <summary>
            Specify the endpoint path by using this attribute
            </summary>
            <param name="Path">Path of the endpoint (asterisk (*) wildcard is supported) [Examples: "/", "/index", "/api/users", "/assets/*", "/users/modify/*"]</param>
            <param name="allowedMethods">Allowed HTTP Methods, ALLOW_ALL by default (Can be stacked using the | (bitwise or) character)</param>
        </member>
        <member name="P:SimpleWebServer.Attributes.WebPath.Path">
            <summary>
            Absolute Path of the endpoint [Examples: "/", "/index", "/api/login"]
            </summary>
        </member>
        <member name="P:SimpleWebServer.Attributes.WebPath.AllowedHttpMethods">
            <summary>
            Allowed HTTP Methods
            </summary>
        </member>
        <member name="T:SimpleWebServer.Extensions.extensions">
            <summary>
            extensions
            </summary>
        </member>
        <member name="M:SimpleWebServer.Extensions.extensions.CreateHTMLResponse(System.Net.HttpListenerContext,System.String,System.Int32,System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
            <summary>
            Creates an HTML response to the incoming request.
            </summary>
            <param name="ctx">The main context</param>
            <param name="htmlContent">HTML content in string format</param>
            <param name="statusCode">HTTP Status Code, 200 [OK] by default</param>
            <param name="additionalHeaders">Additional HTTP headers</param>
            <param name="charset">HTTP Charset, UTF-8 by default</param>
            <returns>True if the response creation is successful; otherwise, false.</returns>
        </member>
        <member name="M:SimpleWebServer.Extensions.extensions.CreateStringResponse(System.Net.HttpListenerContext,System.String,System.Int32,System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
            <summary>
            Creates a simple string response to the incoming request.
            </summary>
            <param name="ctx">The main context</param>
            <param name="content">String Content</param>
            <param name="statusCode">HTTP Status Code, 200 [OK] by default</param>
            <param name="additionalHeaders">Additional HTTP headers</param>
            <param name="charset">HTTP Charset, UTF-8 by default</param>
            <returns>True if the response creation is successful; otherwise, false.</returns>
        </member>
        <member name="M:SimpleWebServer.Extensions.extensions.CreateResponse(System.Net.HttpListenerContext,System.Byte[],System.Int32,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Creates a response to the incoming request.
            </summary>
            <param name="ctx">The main context</param>
            <param name="buffer">Bytes to be sent</param>
            <param name="statusCode">HTTP Status Code, 200 [OK] by default</param>
            <param name="contentType">HTTP Content Type header, null by default</param>
            <param name="additionalHeaders">Additional HTTP headers</param>
            <returns>True if the response creation is successful; otherwise, false.</returns>
        </member>
        <member name="M:SimpleWebServer.Extensions.extensions.Redirect(System.Net.HttpListenerContext,System.String)">
            <summary>
            Redirects the incoming request to a different URL.
            </summary>
            <param name="ctx">The main context.</param>
            <param name="destinationURL">The destination URL for redirection</param>
        </member>
        <member name="T:SimpleWebServer.WebServer">
            <summary>
            Simple Web Server
            </summary>
        </member>
        <member name="M:SimpleWebServer.WebServer.#ctor(System.String)">
            <summary>
            Creation of the WebServer
            </summary>
            <param name="RootURL">Root URL [Example: "http://localhost:8080/"]</param>
        </member>
        <member name="M:SimpleWebServer.WebServer.AddController``1(SimpleWebServer.WebServer.PreExecuteControllerMethod)">
            <summary>
            Adds a controller class to the WebServer
            </summary>
            <typeparam name="T">Controller Class</typeparam>
            <param name="PreExecute">PreExecute method for this controller (This method will be executed before the controller methods to handle bulk authentication/authorization. If it returns true, the specified controller method will be executed; otherwise, the specified controller method won't be executed)</param>
            <returns>Added Endpoint Count</returns>
        </member>
        <member name="M:SimpleWebServer.WebServer.Start">
            <summary>
            Starts the WebServer
            </summary>
        </member>
        <member name="M:SimpleWebServer.WebServer.Stop">
            <summary>
            Stops the WebServer
            </summary>
        </member>
        <member name="T:SimpleWebServer.WebServer.ControllerMethod">
            <summary>
            The method that will be executed when a user sends a request to the specified path.
            </summary>
        </member>
        <member name="T:SimpleWebServer.WebServer.PreExecuteControllerMethod">
            <summary>
            This method will be executed before the controller methods to handle bulk authentication/authorization. If it returns true, the specified controller method will be executed; otherwise, the specified controller method won't be executed.
            </summary>
        </member>
        <member name="E:SimpleWebServer.WebServer.On404NotFound">
            <summary>
            The event that will be invoked when a user sends a request to an undefined path.
            </summary>
        </member>
        <member name="E:SimpleWebServer.WebServer.On405MethodNotAllowed">
            <summary>
            The event that will be invoked when a user sends a request with an invalid http method
            </summary>
        </member>
        <member name="T:SimpleWebServer.HttpMethods">
            <summary>
            Http Methods
            </summary>
        </member>
        <member name="F:SimpleWebServer.HttpMethods.GET">
            <summary>
            Http Method GET
            </summary>
        </member>
        <member name="F:SimpleWebServer.HttpMethods.POST">
            <summary>
            Http Method POST
            </summary>
        </member>
        <member name="F:SimpleWebServer.HttpMethods.PUT">
            <summary>
            Http Method PUT
            </summary>
        </member>
        <member name="F:SimpleWebServer.HttpMethods.PATCH">
            <summary>
            Http Method PATCH
            </summary>
        </member>
        <member name="F:SimpleWebServer.HttpMethods.DELETE">
            <summary>
            Http Method DELETE
            </summary>
        </member>
        <member name="F:SimpleWebServer.HttpMethods.HEAD">
            <summary>
            Http Method HEAD
            </summary>
        </member>
        <member name="F:SimpleWebServer.HttpMethods.OPTIONS">
            <summary>
            Http Method OPTIONS
            </summary>
        </member>
        <member name="F:SimpleWebServer.HttpMethods.ALLOW_ALL">
            <summary>
            Using this will allow any valid / invalid Http Methods
            </summary>
        </member>
    </members>
</doc>
